# * Tensor acts on entire system
# ** Wigner‚ÄìEckart

@doc raw"""
    matrix_element((Œ≥j‚Ä≤, m‚Ä≤), T·µèq::TensorComponent, (Œ≥j, m))

Calculate the matrix element `‚ü®Œ≥‚Ä≤j‚Ä≤m‚Ä≤|T·µèq|Œ≥jm‚ü©` via Wigner‚ÄìEckart's
theorem:


```math
\begin{equation}
\begin{aligned}
\matrixel{\gamma'j'm'}{\tensor{T}^{(k)}_q}{\gamma jm}
&\defd
(-)^{2k} \frac{1}{\angroot{j'}}
C_{jm;kq}^{j'm'}
\redmatrixel{\gamma' j'}{\tensor{T}^{(k)}}{\gamma j} \\
&=
(-)^{j'-m'}
\begin{pmatrix}
j'&k&j\\
-m'&q&m
\end{pmatrix}
\redmatrixel{\gamma'j'}{\tensor{T}^{(k)}}{\gamma j},
\end{aligned}
\label{eqn:wigner-eckart}
\tag{V13.1.2}
\end{equation}
```

where the _reduced matrix element_
$\redmatrixel{n'j'}{\tensor{T}^{(k)}}{nj}$ does not depend on
$m,m'$. `j‚Ä≤` and `j` are the total angular momenta with `m‚Ä≤` and `m`
being their respective projections. `Œ≥‚Ä≤` and `Œ≥` are all other quantum
numbers needed to fully specify the quantum system; their presence
depend on the quantum system.

# Examples

```jldoctest
julia> matrix_element((2, 1), TensorComponent(OrbitalAngularMomentum(), 1), (2, 0))
-1.7320508075688774

julia> matrix_element((0, 0), TensorComponent(SphericalTensor(1), 0), (1, 0))
0.5773502691896256

julia> matrix_element(((1,half(1),half(1)), -half(1)),
                     TensorComponent(TotalAngularMomentum(), -1),
                     ((1,half(1),half(1)), half(1)))
0.7071067811865475
```
"""
function matrix_element((Œ≥j‚Ä≤, m‚Ä≤)::Tuple{<:Any, <:Number},
                        T·µèq::TensorComponent,
                        (Œ≥j, m)::Tuple{<:Any, <:Number})
    T·µè = parent(T·µèq)
    r = rme(Œ≥j‚Ä≤, T·µè, Œ≥j)
    iszero(r) && return 0
    j‚Ä≤,j = last(Œ≥j‚Ä≤), last(Œ≥j)
    c = powneg1(Int(j‚Ä≤-m‚Ä≤))*wigner3j(j‚Ä≤, rank(T·µè), j,
                                     -m‚Ä≤, component(T·µèq), m)
    iszero(c) && return 0
    c*r
end

matrix_element(Œ≥j‚Ä≤m‚Ä≤::Tuple{<:Any, <:Number},
               lct::LinearCombinationTensor,
               Œ≥jm::Tuple{<:Any, <:Number}) =
    sum(filter!(!iszero, [c*matrix_element(Œ≥j‚Ä≤m‚Ä≤, T·µèq, Œ≥jm) for (T·µèq,c) in lct]))

# ** Product tensors

@doc raw"""
    matrix_element((Œ≥j‚Ä≤, m‚Ä≤), X::TensorScalarProduct, (Œ≥j, m))

Calculate the matrix element of a scalar product tensor according to:

```math
\begin{equation}
\begin{aligned}
\matrixel{n'j'm'}{[\tensor{P}^{(k)}\cdot\tensor{Q}^{(k)}]}{njm}
=&
\delta_{jj'}\delta_{mm'}
\frac{1}{\angroot{j}^2}\\
&\times\sum_{n_1j_1}
(-)^{-j+j_1}
\redmatrixel{n'j}{\tensor{P}^{(k)}}{n_1j_1}
\redmatrixel{n_1j_1}{\tensor{Q}^{(k)}}{nj}
\end{aligned}
\label{eqn:scalar-product-tensor-matrix-element}
\tag{V13.1.11}
\end{equation}
```

The permissible values of ``n_1j_1`` in the summation are found using
[`AngularMomentumAlgebra.couplings`](@ref); it is assumed that the
summation only consists of a finite amount of terms and that

```math
\redmatrixel{n'j}{\tensor{P}^{(k)}}{n_1j_1}\neq0
\iff
\redmatrixel{n_1j_1}{\tensor{P}^{(k)}}{n'j}\neq0,
```

i.e. that ``\tensor{P}^{(k)}`` is (skew)symmetric.

# Examples

```jldoctest
julia> ùêí = SpinAngularMomentum()
ùêíÃÇ‚ÅΩ¬π‚Åæ

julia> ùêí¬≤ = ùêí‚ãÖùêí
(ùêíÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêíÃÇ‚ÅΩ¬π‚Åæ)

julia> matrix_element((half(1), half(1)),
                      ùêí¬≤, (half(1), half(1)))
0.7499999999999998

julia> half(1)*(half(1)+1) # S(S+1)
0.75

julia> ùêâ = TotalAngularMomentum()
ùêâÃÇ‚ÅΩ¬π‚Åæ

julia> ùêâ¬≤ = ùêâ‚ãÖùêâ
(ùêâÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêâÃÇ‚ÅΩ¬π‚Åæ)

julia> matrix_element(((1, half(1), half(3)), half(3)),
                      ùêâ¬≤, ((1, half(1), half(3)), half(3)))
3.7500000000000004

julia> half(3)*(half(3)+1) # J(J+1)
3.75
```
"""
function matrix_element((Œ≥j‚Ä≤, m‚Ä≤), X::TensorScalarProduct, (Œ≥j, m))
    j‚Ä≤, j = last(Œ≥j‚Ä≤), last(Œ≥j)
    @Œ¥ j‚Ä≤,j m‚Ä≤,m

    T,U = X.T,X.U
    c = 0.0

    # We assume that iszero(‚ü®n‚Ä≤j‚Ä≤||ùêìÃÇ‚ÅΩ·µè‚Åæ||n‚ÇÅj‚ÇÅ‚ü©) ‚áî
    # iszero(‚ü®n‚ÇÅj‚ÇÅ||ùêìÃÇ‚ÅΩ·µè‚Åæ||n‚Ä≤j‚Ä≤‚ü©).
    TŒ≥j‚ÇÅ = couplings(T, Œ≥j)
    UŒ≥j‚ÇÅ = couplings(U, Œ≥j)
    Œ≥j‚ÇÅs = map(((TŒ≥j‚ÇÅ, UŒ≥j‚ÇÅ),) -> ‚à©(TŒ≥j‚ÇÅ, UŒ≥j‚ÇÅ), zip(TŒ≥j‚ÇÅ, UŒ≥j‚ÇÅ))
    for Œ≥j‚ÇÅ ‚àà Iterators.product(Œ≥j‚ÇÅs...)
        length(Œ≥j‚ÇÅ) == 1 && (Œ≥j‚ÇÅ = first(Œ≥j‚ÇÅ))
        j‚ÇÅ = last(Œ≥j‚ÇÅ)
        c += powneg1(Int(-j+j‚ÇÅ))*rme(Œ≥j‚Ä≤,T,Œ≥j‚ÇÅ)*rme(Œ≥j‚ÇÅ,U,Œ≥j)
    end

    c/‚àè(j)^2
end

# ** Uncoupled basis functions

@doc raw"""
    matrix_element((Œ≥j‚ÇÅ‚Ä≤, m‚ÇÅ‚Ä≤), (Œ≥j‚ÇÇ‚Ä≤, m‚ÇÇ‚Ä≤), ùêì·µèq, (Œ≥j‚ÇÅ, m‚ÇÅ), (Œ≥j‚ÇÇ, m‚ÇÇ))

Compute the matrix element of the irreducible tensor `ùêì·µèq` acting on
coordinates `1` and `2`, by first coupling `Œ≥j‚ÇÅ‚Ä≤m‚ÇÅ‚Ä≤Œ≥j‚ÇÇ‚Ä≤m‚ÇÇ‚Ä≤` and
`Œ≥j‚ÇÅm‚ÇÅŒ≥j‚ÇÇm‚ÇÇ` to all permissible `j‚Ä≤m‚Ä≤` and `jm`, respectively,
according to

```math
\begin{equation}
\begin{aligned}
&\matrixel{Œ≥_1'j_1'm_1';Œ≥_2'j_2'm_2'}{\tensor{P}^{(k)}_q(1,2)}{Œ≥_1j_1m_1;Œ≥_2j_2m_2} \\
=& (-)^{2k}
\frac{1}{\angroot{j'}}
\sum_{jmj'm'}
C_{j_1m_1;j_2m_2}^{jm}
C_{j_1'm_1';j_2'm_2'}^{j'm'}
C_{jm;kq}^{j'm'}\\
&\times
\redmatrixel{Œ≥_1'j_1'Œ≥_2'j_2'j'}{\tensor{P}^{(k)}(1,2)}{Œ≥_1j_1Œ≥_2j_2j} \\
\equiv&
\sum_{jmj'm'}
C_{j_1m_1;j_2m_2}^{jm}
C_{j_1'm_1';j_2'm_2'}^{j'm'}
\matrixel{Œ≥_1'j_1'Œ≥_2'j_2'j'm'}{\tensor{P}^{(k)}(1,2)}{Œ≥_1j_1Œ≥_2j_2jm}
\end{aligned}
\tag{V13.1.23}
\label{eqn:coupling}
\end{equation}
```

The non-vanishing terms of the sum are found using
[`AngularMomentumAlgebra.couplings`](@ref).

# Examples

```jldoctest
julia> ùêâ = TotalAngularMomentum()
ùêâÃÇ‚ÅΩ¬π‚Åæ

julia> ùêâ‚ÇÄ = TensorComponent(ùêâ, 0)
ùêâÃÇ‚ÅΩ¬π‚Åæ‚ÇÄ

julia> matrix_element((1,1), (half(1),half(1)),
                      ùêâ‚ÇÄ, (1,1), (half(1), half(1)))
1.5

julia> matrix_element((1,-1), (half(1),half(1)),
                      ùêâ‚ÇÄ, (1,-1), (half(1), half(1)))
-0.4999999999999999

julia> ùêâ‚ÇÅ = TensorComponent(ùêâ, 1)
ùêâÃÇ‚ÅΩ¬π‚Åæ‚ÇÅ

julia> matrix_element((1,1), (half(1),half(1)),
                      ùêâ‚ÇÅ, (1,0), (half(1), half(1)))
-1.0

julia> ùêâ¬≤ = ùêâ‚ãÖùêâ
(ùêâÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêâÃÇ‚ÅΩ¬π‚Åæ)

julia> matrix_element((1,1), (half(1),half(1)),
                      ùêâ¬≤, (1,1), (half(1), half(1)))
3.7500000000000004

julia> half(3)*(half(3)+1) # J(J+1)
3.75
```
"""
function matrix_element((Œ≥j‚ÇÅ‚Ä≤, m‚ÇÅ‚Ä≤), (Œ≥j‚ÇÇ‚Ä≤, m‚ÇÇ‚Ä≤), ùêì·µèq, (Œ≥j‚ÇÅ, m‚ÇÅ), (Œ≥j‚ÇÇ, m‚ÇÇ))
    j‚ÇÅ‚Ä≤,j‚ÇÇ‚Ä≤,j‚ÇÅ,j‚ÇÇ = last(Œ≥j‚ÇÅ‚Ä≤), last(Œ≥j‚ÇÇ‚Ä≤), last(Œ≥j‚ÇÅ), last(Œ≥j‚ÇÇ)
    j‚Ä≤s,m‚Ä≤ = couplings(j‚ÇÅ‚Ä≤, m‚ÇÅ‚Ä≤, j‚ÇÇ‚Ä≤, m‚ÇÇ‚Ä≤)
    js,m = couplings(j‚ÇÅ, m‚ÇÅ, j‚ÇÇ, m‚ÇÇ)

    Œ≥j‚Ä≤ = (Œ≥j‚ÇÅ‚Ä≤..., Œ≥j‚ÇÇ‚Ä≤...)
    Œ≥j = (Œ≥j‚ÇÅ..., Œ≥j‚ÇÇ...)

    v = 0.0
    for j‚Ä≤ ‚àà j‚Ä≤s
        c‚Ä≤ = clebschgordan(j‚ÇÅ‚Ä≤, m‚ÇÅ‚Ä≤, j‚ÇÇ‚Ä≤, m‚ÇÇ‚Ä≤, j‚Ä≤, m‚Ä≤)
        for j ‚àà js
            me = matrix_element(((Œ≥j‚Ä≤...,j‚Ä≤), m‚Ä≤), ùêì·µèq, ((Œ≥j...,j), m))
            iszero(me) && continue
            c = c‚Ä≤*clebschgordan(j‚ÇÅ, m‚ÇÅ, j‚ÇÇ, m‚ÇÇ, j, m)
            v += c*me
        end
    end
    v
end

# * Tensor acts on subsystems

# ** Uncoupling of coupled basis states

@doc raw"""
    matrix_element((Œ≥j‚ÇÅ‚Ä≤, Œ≥j‚ÇÇ‚Ä≤, j‚Ä≤, m‚Ä≤), ùêì·µèq, (Œ≥j‚ÇÅ, Œ≥j‚ÇÇ, j, m))

Compute the matrix element of the tensor `ùêì·µèq` which acts on
coordinate `1` only in the coupled basis, by employing the uncoupling
formula

```math
\begin{equation}
\begin{aligned}
&\matrixel{Œ≥_1'j_1'Œ≥_2'j_2'j'm'}{\tensor{T}^{(k)}_q(1)}{Œ≥_1j_1Œ≥_2j_2jm}\\
=& \delta_{j_2'j_2}\delta_{Œ≥_2'Œ≥_2}
(-)^{j+j_1'+j_2-k}
\angroot{j}
C_{jm;kq}^{j'm'}\\
&\times
\wignersixj{j_1&j_2&j\\j'&k&j_1'}
\redmatrixel{Œ≥_1'j_1'}{\tensor{T}^{(k)}(1)}{Œ≥_1j_1}
\end{aligned}
\tag{V13.1.40}
\label{eqn:uncoupling}
\end{equation}
```

# Examples

```jldoctest
julia> ùêã‚ÇÄ = TensorComponent(OrbitalAngularMomentum(), 0)
ùêãÃÇ‚ÅΩ¬π‚Åæ‚ÇÄ

julia> matrix_element((1, half(1), half(3), half(3)),
                      ùêã‚ÇÄ, (1, half(1), half(3), half(3)))
0.9999999999999999

julia> matrix_element((1, 1), ùêã‚ÇÄ, (1, 1)) # For comparison
0.9999999999999999

julia> ùêí‚ÇÄ = TensorComponent(SpinAngularMomentum(), 0)
ùêíÃÇ‚ÅΩ¬π‚Åæ‚ÇÄ

julia> matrix_element((half(1), 1, half(3), half(3)),
                      ùêí‚ÇÄ, (half(1), 1, half(3), half(3)))
0.49999999999999994

julia> matrix_element((half(1),half(1)), ùêí‚ÇÄ, (half(1),half(1)))
0.49999999999999994
```

"""
function matrix_element((Œ≥j‚ÇÅ‚Ä≤, Œ≥j‚ÇÇ‚Ä≤, j‚Ä≤, m‚Ä≤)::Tuple{<:Any, <:Any, <:Number, <:Number},
                        ùêì·µèq::TensorComponent,
                        (Œ≥j‚ÇÅ, Œ≥j‚ÇÇ, j, m)::Tuple{<:Any, <:Any, <:Number, <:Number})
    @Œ¥ Œ≥j‚ÇÇ‚Ä≤,Œ≥j‚ÇÇ

    ùêì·µè = parent(ùêì·µèq)
    r = rme(Œ≥j‚ÇÅ‚Ä≤, ùêì·µè, Œ≥j‚ÇÅ)
    iszero(r) && return 0

    j‚ÇÅ‚Ä≤,j‚ÇÇ‚Ä≤,j‚ÇÅ,j‚ÇÇ = last(Œ≥j‚ÇÅ‚Ä≤), last(Œ≥j‚ÇÇ‚Ä≤), last(Œ≥j‚ÇÅ), last(Œ≥j‚ÇÇ)
    k = rank(ùêì·µè)
    q = component(ùêì·µèq)
    c = clebschgordan(j,m,k,q,j‚Ä≤,m‚Ä≤)
    iszero(c) && return 0
    w6j = wigner6j(j‚ÇÅ, j‚ÇÇ, j,
                   j‚Ä≤, k,  j‚ÇÅ‚Ä≤)
    iszero(w6j) && return 0

    powneg1(Int(j+j‚ÇÅ‚Ä≤+j‚ÇÇ-k))*‚àè(j)*c*w6j*r
end

function matrix_element((Œ≥j‚ÇÅ‚Ä≤, Œ≥j‚ÇÇ‚Ä≤, j‚Ä≤, m‚Ä≤)::Tuple{<:Any, Tuple{}, <:Number, <:Number},
                        ùêì·µèq::TensorComponent,
                        (Œ≥j‚ÇÅ, Œ≥j‚ÇÇ, j, m)::Tuple{<:Any, Tuple{}, <:Number, <:Number})
    last(Œ≥j‚ÇÅ‚Ä≤) == j‚Ä≤ && last(Œ≥j‚ÇÅ) == j ||
        throw(ArgumentError("Angular momentum mismatch"))
    matrix_element((Œ≥j‚ÇÅ‚Ä≤, m‚Ä≤), ùêì·µèq, (Œ≥j‚ÇÅ, m))
end


# ** Uncoupled basis states

@doc raw"""
    matrix_element2(Œ≥jm‚ÇÅ‚Ä≤, Œ≥jm‚ÇÇ‚Ä≤, X::TensorScalarProduct, Œ≥jm‚ÇÅ, Œ≥jm‚ÇÇ)

The matrix element of a scalar product of two tensors acting on
different coordinates is given by (in the uncoupled basis)

```math
\begin{equation}
\begin{aligned}
&\matrixel{\gamma_1'j_1'm_1';\gamma_2'j_2'm_2'}{[\tensor{P}^{(k)}(1)\cdot\tensor{Q}^{(k)}(2)]}{\gamma_1j_1m_1;\gamma_2j_2m_2}\\
=&
\frac{1}{\angroot{j_1'j_2'}}
\sum_\alpha(-)^{-\alpha}
C_{j_1m_1;k,\alpha}^{j_1'm_1'}
C_{j_2m_2;k,-\alpha}^{j_2'm_2'}\\
&\times
\redmatrixel{\gamma_1'j_1'}{\tensor{P}^{(k)}(1)}{\gamma_1j_1}
\redmatrixel{\gamma_2'j_2'}{\tensor{Q}^{(k)}(2)}{\gamma_2j_2} \\
\equiv&
\sum_\alpha
(-)^{-\alpha}
\matrixel{\gamma_1'j_1'm_1'}{\tensor{P}^{(k)}_{\alpha}(1)}{\gamma_1j_1m_1}
\matrixel{\gamma_2'j_2'm_2'}{\tensor{Q}^{(k)}_{-\alpha}(2)}{\gamma_2j_2m_2}
\end{aligned}
\tag{V13.1.26}
\label{eqn:scalar-product-tensor-matrix-element-diff-coords-uncoupled}
\end{equation}
```

Since the [Clebsch‚ÄìGordan coefficients](@ref) can be rewritten using 3j
symbols and the 3j symbols vanish unless $m_1 + \alpha - m_1' = m_2 -
\alpha - m_2' = 0$, we have

```math
\alpha = m_1' - m_1 = m_2-m_2'
```

This case occurs in two-body interactions, such as the [Coulomb
interaction](@ref), where ``1',1`` and ``2',2`` are pairs of orbitals
and the scalar product tensor is a term in the multipole expansion in
terms of [Spherical tensors](@ref tensors_spherical_tensors):

```jldoctest
julia> ùêÇ‚Å∞ = SphericalTensor(0)
ùêÇÃÇ‚ÅΩ‚Å∞‚Åæ

julia> matrix_element2((0, 0), (0, 0), ùêÇ‚Å∞‚ãÖùêÇ‚Å∞, (0,0), (0, 0)) # ‚ü®1s‚ÇÄ,1s‚ÇÄ|ùêÇ‚Å∞‚ãÖùêÇ‚Å∞|1s‚ÇÄ,1s‚ÇÄ‚ü©
1.0

julia> ùêÇ¬π = SphericalTensor(1)
ùêÇÃÇ‚ÅΩ¬π‚Åæ

julia> matrix_element2((0, 0), (1, 0), ùêÇ¬π‚ãÖùêÇ¬π, (1,0), (2, 0)) # ‚ü®1s‚ÇÄ,2p‚ÇÄ|ùêÇ¬π‚ãÖùêÇ¬π|2p‚ÇÄ,3d‚ÇÄ‚ü©
0.29814239699997186

julia> matrix_element2((0, 0), (1, 1), ùêÇ¬π‚ãÖùêÇ¬π, (1,0), (2, 1)) # ‚ü®1s‚ÇÄ,2p‚ÇÅ|ùêÇ¬π‚ãÖùêÇ¬π|2p‚ÇÄ,3d‚ÇÅ‚ü©
0.25819888974716104
```

but also in the case of the operator ``\tensor{L}\cdot\tensor{S}`` and
coordinates ``1`` and ``2`` correspond to orbital and spin angular
momenta, respectively. We can verify this using the classical result
known from spin‚Äìorbit splitting:

```math
\begin{aligned}
J^2 &= (\tensor{L}+\tensor{S})^2 = L^2 + 2\tensor{L}\cdot\tensor{S} + S^2\\
\implies
\expect{\tensor{L}\cdot\tensor{S}} &=
\frac{1}{2}(\expect{J^2} - \expect{L^2} - \expect{S^2}) =
\frac{1}{2}[J(J+1) - L(L+1) - S(S+1)]
\end{aligned}
```

In the uncoupled basis, ``J`` is not a good quantum number (it is not
a constant of motion), except for _pure states_, i.e. those with
maximal ``\abs{m_\ell + m_s}``:

```jldoctest
julia> X = OrbitalAngularMomentum()‚ãÖSpinAngularMomentum()
(ùêãÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêíÃÇ‚ÅΩ¬π‚Åæ)

julia> matrix_element2((1, 1), (half(1), half(1)),
                      X, (1,1), (half(1), half(1)))
0.4999999999999999

julia> 1/2*(half(3)*(half(3)+1)-1*(1+1)-half(1)*(half(1)+1)) # 1/2(J(J+1)-L(L+1)-S(S+1))
0.5
```
"""
function matrix_element2(Œ≥jm‚ÇÅ‚Ä≤, Œ≥jm‚ÇÇ‚Ä≤, X::TensorScalarProduct, Œ≥jm‚ÇÅ, Œ≥jm‚ÇÇ)
    T,U = X.T,X.U
    k = rank(T)

    Œ± = Int(last(Œ≥jm‚ÇÅ‚Ä≤)-last(Œ≥jm‚ÇÅ))
    (Œ± != last(Œ≥jm‚ÇÇ)-last(Œ≥jm‚ÇÇ‚Ä≤) || abs(Œ±) > k) && return 0

    powneg1(-Œ±)*
    matrix_element(Œ≥jm‚ÇÅ‚Ä≤, TensorComponent(T,Œ±), Œ≥jm‚ÇÅ)*
    matrix_element(Œ≥jm‚ÇÇ‚Ä≤, TensorComponent(U,-Œ±), Œ≥jm‚ÇÇ)
end

@doc raw"""
    matrix_element2((Œ≥j‚ÇÅ‚Ä≤, Œ≥j‚ÇÇ‚Ä≤, j‚Ä≤, m‚Ä≤), X::TensorScalarProduct, (Œ≥j‚ÇÅ, Œ≥j‚ÇÇ, j, m))

The matrix element of a scalar product of two tensors acting on
different coordinates is given by (in the coupled basis)

```math
\begin{equation}
\begin{aligned}
&\matrixel{n_1'j_1'n_2'j_2'j'm'}{[\tensor{P}^{(k)}(1)\cdot\tensor{Q}^{(k)}(2)]}{n_1j_1n_2j_2jm}\\
=& \delta_{j'j}\delta_{m'm}
(-)^{j+j_1+j_2'}
\wignersixj{j_1'&j_1&k\\j_2&j_2'&j}\\
&\times
\redmatrixel{n_1'j_1'}{\tensor{P}^{(k)}(1)}{n_1j_1}
\redmatrixel{n_2'j_2'}{\tensor{Q}^{(k)}(2)}{n_2j_2}.
\end{aligned}
\tag{V13.1.29}
\label{eqn:scalar-product-tensor-matrix-element-diff-coords-coupled}
\end{equation}
```

```jldoctest
julia> X = OrbitalAngularMomentum()‚ãÖSpinAngularMomentum()
(ùêãÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêíÃÇ‚ÅΩ¬π‚Åæ)

julia> matrix_element2((1, half(1), half(3), half(3)),
                       X, (1, half(1), half(3), half(3)))
0.4999999999999999
```
"""
function matrix_element2((Œ≥j‚ÇÅ‚Ä≤, Œ≥j‚ÇÇ‚Ä≤, j‚Ä≤, m‚Ä≤), X::TensorScalarProduct, (Œ≥j‚ÇÅ, Œ≥j‚ÇÇ, j, m))
    @Œ¥ j‚Ä≤,j m‚Ä≤,m
    j‚ÇÅ‚Ä≤,j‚ÇÇ‚Ä≤,j‚ÇÅ,j‚ÇÇ = last(Œ≥j‚ÇÅ‚Ä≤), last(Œ≥j‚ÇÇ‚Ä≤), last(Œ≥j‚ÇÅ), last(Œ≥j‚ÇÇ)

    T,U = X.T,X.U
    Tr = rme(Œ≥j‚ÇÅ‚Ä≤, T, Œ≥j‚ÇÅ)
    iszero(Tr) && return 0
    Ur = rme(Œ≥j‚ÇÇ‚Ä≤, U, Œ≥j‚ÇÇ)
    iszero(Ur) && return 0

    powneg1(Int(j+j‚ÇÅ+j‚ÇÇ‚Ä≤))*Tr*Ur*wigner6j(j‚ÇÅ‚Ä≤, j‚ÇÅ, rank(T),
                                          j‚ÇÇ, j‚ÇÇ‚Ä≤, j)
end

# * Tensor matrix elements in orbital basis

"""
    dot(a::SpinOrbital,
        ùêì·µèq::Union{TensorComponent,TensorScalarProduct},
        b::SpinOrbital)

Compute the matrix element `‚ü®a|ùêì·µèq|b‚ü©` in the basis of spin-orbitals,
dispatching to the correct low-level function `matrix_element`,
depending on the value of `system(ùêì·µèq)`.

# Examples with coupled orbitals

```jldoctest
julia> a,b,c,d = (SpinOrbital(ro"2p", half(3)),
                  SpinOrbital(ro"2p", half(1)),
                  SpinOrbital(ro"2s", half(1)),
                  SpinOrbital(ro"3d", half(3)))
(2p(3/2), 2p(1/2), 2s(1/2), 3d(3/2))

julia> ùêã, ùêí, ùêâ = OrbitalAngularMomentum(), SpinAngularMomentum(), TotalAngularMomentum()
(ùêãÃÇ‚ÅΩ¬π‚Åæ, ùêíÃÇ‚ÅΩ¬π‚Åæ, ùêâÃÇ‚ÅΩ¬π‚Åæ)

julia> ùêã¬≤, ùêí¬≤, ùêâ¬≤ = ùêã‚ãÖùêã, ùêí‚ãÖùêí, ùêâ‚ãÖùêâ
((ùêãÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêãÃÇ‚ÅΩ¬π‚Åæ), (ùêíÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêíÃÇ‚ÅΩ¬π‚Åæ), (ùêâÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêâÃÇ‚ÅΩ¬π‚Åæ))

julia> dot(a, cartesian_tensor_component(ùêâ, :x), b),
           1/2*‚àö((3/2+1/2+1)*(3/2-1/2)) # 1/2‚àö((J+M+1)*(J-M))
(0.8660254037844386, 0.8660254037844386)

julia> dot(a, cartesian_tensor_component(ùêâ, :z), a), a.m[1]
(1.5, 3/2)

julia> dot(a, TensorComponent(ùêã, 0), a)
0.9999999999999999

julia> dot(c, cartesian_tensor_component(Gradient(), :x), a)
- 0.408248(‚àÇ·µ£ + 2/r)

julia> dot(c, cartesian_tensor_component(SphericalTensor(1), :x), a)
-0.40824829046386296

julia> orbitals = rsos"2[p]"
6-element Array{SpinOrbital{RelativisticOrbital{Int64},Tuple{Half{Int64}}},1}:
 2p-(-1/2)
 2p-(1/2)
 2p(-3/2)
 2p(-1/2)
 2p(1/2)
 2p(3/2)

julia> map(o -> dot(o, ùêâ¬≤, o), orbitals)
6-element Array{Float64,1}:
 0.7499999999999998
 0.7499999999999998
 3.7500000000000004
 3.7500000000000004
 3.7500000000000004
 3.7500000000000004

julia> 1/2*(1/2+1),3/2*(3/2+1) # J(J+1)
(0.75, 3.75)

julia> dot(a, ùêã¬≤, a), 1*(1+1)
(2.0, 2)

julia> dot(d, ùêã¬≤, d), 2*(2+1)
(5.999999999999999, 6)

julia> dot(a, ùêí¬≤, a), 1/2*(1/2+1)
(0.7499999999999998, 0.75)

julia> dot(a, ùêã‚ãÖùêí, a)
0.4999999999999999
```

# Examples with uncoupled orbitals

```jldoctest
julia> a,b,c,d = (SpinOrbital(o"2p", 1, half(1)),
                  SpinOrbital(o"2p", -1, half(1)),
                  SpinOrbital(o"2s", 0, half(1)),
                  SpinOrbital(o"3d", 2, -half(1)))
(2p‚ÇÅŒ±, 2p‚Çã‚ÇÅŒ±, 2s‚ÇÄŒ±, 3d‚ÇÇŒ≤)

julia> ùêã,ùêí,ùêâ = OrbitalAngularMomentum(),SpinAngularMomentum(),TotalAngularMomentum()
(ùêãÃÇ‚ÅΩ¬π‚Åæ, ùêíÃÇ‚ÅΩ¬π‚Åæ, ùêâÃÇ‚ÅΩ¬π‚Åæ)

julia> ùêã¬≤,ùêí¬≤,ùêâ¬≤ = ùêã‚ãÖùêã,ùêí‚ãÖùêí,ùêâ‚ãÖùêâ
((ùêãÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêãÃÇ‚ÅΩ¬π‚Åæ), (ùêíÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêíÃÇ‚ÅΩ¬π‚Åæ), (ùêâÃÇ‚ÅΩ¬π‚Åæ‚ãÖùêâÃÇ‚ÅΩ¬π‚Åæ))

julia> dot(a, cartesian_tensor_component(ùêâ, :z), a), sum(a.m)
(1.5, 3/2)

julia> dot(a, TensorComponent(ùêã, 0), a)
0.9999999999999999

julia> # Same as previous, but with spin down
       dot(a, TensorComponent(ùêã, 0), SpinOrbital(o"2p", 1, -half(1)))
0

julia> dot(d, TensorComponent(ùêã, 0), d)
1.9999999999999998

julia> dot(d, TensorComponent(ùêí, 0), d)
-0.49999999999999994

julia> dot(c, cartesian_tensor_component(Gradient(), :x), a)
- 0.408248(‚àÇ·µ£ + 2/r)

julia> dot(c, cartesian_tensor_component(SphericalTensor(1), :x), a)
-0.40824829046386285

julia> orbitals = sos"2[p]"
6-element Array{SpinOrbital{Orbital{Int64},Tuple{Int64,Half{Int64}}},1}:
 2p‚Çã‚ÇÅŒ±
 2p‚Çã‚ÇÅŒ≤
 2p‚ÇÄŒ±
 2p‚ÇÄŒ≤
 2p‚ÇÅŒ±
 2p‚ÇÅŒ≤

julia> # Only 2p‚Çã‚ÇÅŒ≤ and 2p‚ÇÅŒ± are pure states, with J = 3/2 => J(J + 1) = 3.75
       map(o -> dot(o, ùêâ¬≤, o), orbitals)
6-element Array{Float64,1}:
 1.7499999999999998
 3.7500000000000004
 2.75
 2.75
 3.7500000000000004
 1.7499999999999998

julia> dot(a, ùêã¬≤, a), 1*(1+1)
(2.0, 2)

julia> dot(d, ùêã¬≤, d), 2*(2+1)
(5.999999999999999, 6)

julia> dot(a, ùêí¬≤, a), half(1)*(half(1)+1)
(0.7499999999999998, 0.75)

julia> dot(a, ùêã‚ãÖùêí, a)
0.4999999999999999
```
"""
LinearAlgebra.dot(a::SpinOrbital,
                  ùêì·µèq::Union{TensorComponent,TensorScalarProduct},
                  b::SpinOrbital) =
                      matrix_element(system(ùêì·µèq), a, ùêì·µèq, b)

"""
    dot((a,b)::Tuple, X::TensorScalarProduct, (c,d)::Tuple)

Compute the matrix element `‚ü®a(1)b(2)|ùêì(1)‚ãÖùêî(2)|c(1)d(2)‚ü©` in the
basis of spin-orbitals, dispatching the correct low-level function
`matrix_element` depending on the value of `system(X)`, where `X` is
the scalar product tensor.

# Examples

```jldoctest
julia> ùêä‚Å∞,ùêä¬≤ = CoulombTensor(0),CoulombTensor(2)
(ùêäÃÇ‚ÅΩ‚Å∞‚Åæ, ùêäÃÇ‚ÅΩ¬≤‚Åæ)

julia> a,b = SpinOrbital(o"1s", 0, half(1)),SpinOrbital(o"3d", 0, half(1))
(1s‚ÇÄŒ±, 3d‚ÇÄŒ±)

julia> dot((a,b), ùêä‚Å∞‚ãÖùêä‚Å∞, (a,b))
1.0

julia> dot((a,b), ùêä¬≤‚ãÖùêä¬≤, (b,a))
0.19999999999999998

julia> a,b = SpinOrbital(ro"1s", half(1)),SpinOrbital(ro"3d", half(1))
(1s(1/2), 3d(1/2))

julia> dot((a,b), ùêä‚Å∞‚ãÖùêä‚Å∞, (a,b))
1.0

julia> dot((a,b), ùêä¬≤‚ãÖùêä¬≤, (b,a))
0.12
```
"""
LinearAlgebra.dot((a,b)::Tuple, X::TensorScalarProduct, (c,d)::Tuple) =
    matrix_element(system(X), (a,b), X, (c,d))

LinearAlgebra.dot(o‚Ä≤, lct::LinearCombinationTensor, o) =
    sum(filter!(!iszero, [c*dot(o‚Ä≤, T·µèq, o) for (T·µèq,c) in lct]))

# ** Coupled orbitals

"""
    matrix_element(::Union{FullSystem,TotalAngularMomentumSubSystem},
                   a::SpinOrbital{<:RelativisticOrbital},
                   ùêì·µèq::TensorComponent,
                   b::SpinOrbital{<:RelativisticOrbital})

The matrix element of a tensor acting on the full system or the total
angular momentum, evaluated in the basis of coupled spin-orbitals, is
simply computed using the Wigner‚ÄìEckart theorem
``\\eqref{eqn:wigner-eckart}``.
"""
matrix_element(system::Union{FullSystem,TotalAngularMomentumSubSystem},
               a::SpinOrbital{<:RelativisticOrbital},
               ùêì·µèq::TensorComponent,
               b::SpinOrbital{<:RelativisticOrbital}) =
                   matrix_element(quantum_numbers(system, a),
                                  ùêì·µèq, quantum_numbers(system, b))

"""
    matrix_element(system,
                   a::SpinOrbital{<:RelativisticOrbital},
                   ùêì·µèq::TensorComponent,
                   b::SpinOrbital{<:RelativisticOrbital})

The matrix element of a tensor acting on `system`, which is a
subsystem, evaluated in the basis coupled spin-orbitals, needs to be
computed via the uncoupling formula ``\\eqref{eqn:uncoupling}``.
"""
function matrix_element(system,
                        a::SpinOrbital{<:RelativisticOrbital},
                        ùêì·µèq::TensorComponent,
                        b::SpinOrbital{<:RelativisticOrbital})
    j‚Ä≤, m‚Ä≤ = a.orb.j, a.m[1]
    j, m = b.orb.j, b.m[1]
    Œ≥j‚ÇÅ‚Ä≤, Œ≥j‚ÇÅ = first.(quantum_numbers(system, a, b))
    Œ≥j‚ÇÇ‚Ä≤, Œ≥j‚ÇÇ = first.(other_quantum_numbers(system, a, b))
    matrix_element((Œ≥j‚ÇÅ‚Ä≤, Œ≥j‚ÇÇ‚Ä≤, j‚Ä≤, m‚Ä≤), ùêì·µèq, (Œ≥j‚ÇÅ, Œ≥j‚ÇÇ, j, m))
end

"""
    matrix_element(::Tuple{S,S},
                   a::SpinOrbital{<:RelativisticOrbital},
                   X::TensorScalarProduct,
                   b::SpinOrbital{<:RelativisticOrbital}) where {S<:Union{FullSystem,TotalAngularMomentumSubSystem}}

The matrix element of a tensor scalar product, where both factors act
on the full system or the total angular momentum, evaluated in the
basis of coupled spin-orbitals, is computed using
``\\eqref{eqn:scalar-product-tensor-matrix-element}``.
"""
matrix_element(systems::Tuple{S,S},
               a::SpinOrbital{<:RelativisticOrbital},
               X::TensorScalarProduct,
               b::SpinOrbital{<:RelativisticOrbital}) where {S<:Union{FullSystem,TotalAngularMomentumSubSystem}} =
                   matrix_element(quantum_numbers(systems[1], a),
                                  X, quantum_numbers(systems[1], b))

@doc raw"""
    matrix_element(systems::Tuple{S,S},
                   a::SpinOrbital{<:RelativisticOrbital},
                   X::TensorScalarProduct,
                   b::SpinOrbital{<:RelativisticOrbital}) where {S<:SubSystem}

The matrix element of a tensor scalar product, where both factors act
on the same subsystem, evaluated in the
basis of coupled spin-orbitals, is computed using

```math
\begin{equation}
\begin{aligned}
&\matrixel{n_1'j_1'n_2'j_2'j'm'}{[\tensor{P}^{(k)}(1)\cdot\tensor{Q}^{(k)}(1)]}{n_1j_1n_2j_2jm}\\
=&\delta_{n_2'n_2}\delta_{j_2'j_2}\delta_{j_1'j_1}\delta_{j'j}\delta_{m'm}
\frac{1}{\angroot{j_1}^2}
(-)^{-j_1}\\
&\times
\sum_{JN}(-)^J
\redmatrixel{n_1'j_1}{\tensor{P}^{(k)}(1)}{NJ}
\redmatrixel{NJ}{\tensor{Q}^{(k)}(1)}{n_1j_1}.
\end{aligned}
\tag{V13.1.43}
\end{equation}
```

Apart from the additional factor ``\delta_{n_2'n_2}\delta_{j_2'j_2}``,
this expression is equivalent to
``\eqref{eqn:scalar-product-tensor-matrix-element}``.
"""
function matrix_element((s,_)::Tuple{S,S},
                        a::SpinOrbital{<:RelativisticOrbital},
                        X::TensorScalarProduct,
                        b::SpinOrbital{<:RelativisticOrbital}) where {S<:SubSystem}
    Œ≥j‚ÇÅ‚Ä≤, Œ≥j‚ÇÅ = first.(quantum_numbers(s, a, b))
    Œ≥j‚ÇÇ‚Ä≤, Œ≥j‚ÇÇ = first.(other_quantum_numbers(s, a, b))
    @Œ¥ Œ≥j‚ÇÇ‚Ä≤,Œ≥j‚ÇÇ a.orb.j,b.orb.j
    matrix_element((Œ≥j‚ÇÅ‚Ä≤, a.m[1]), X, (Œ≥j‚ÇÅ, b.m[1]))
end

"""
    matrix_element((s‚ÇÅ,s‚ÇÇ)::Tuple{<:SubSystem,<:SubSystem},
                   a::SpinOrbital{<:RelativisticOrbital},
                   X::TensorScalarProduct,
                   b::SpinOrbital{<:RelativisticOrbital})

The matrix element of a tensor scalar product, where the factors act
on different subsystems, evaluated in the basis of coupled
spin-orbitals, is computed using
``\\eqref{eqn:scalar-product-tensor-matrix-element-diff-coords-coupled}``.
"""
function matrix_element((s‚ÇÅ,s‚ÇÇ)::Tuple{<:SubSystem,<:SubSystem},
                        a::SpinOrbital{<:RelativisticOrbital},
                        X::TensorScalarProduct,
                        b::SpinOrbital{<:RelativisticOrbital})
    Œ≥j‚ÇÅ‚Ä≤, Œ≥j‚ÇÅ = first.(quantum_numbers(s‚ÇÅ, a, b))
    Œ≥j‚ÇÇ‚Ä≤, Œ≥j‚ÇÇ = first.(quantum_numbers(s‚ÇÇ, a, b))
    matrix_element2((Œ≥j‚ÇÅ‚Ä≤, Œ≥j‚ÇÇ‚Ä≤, a.orb.j, a.m[1]), X, (Œ≥j‚ÇÅ, Œ≥j‚ÇÇ, b.orb.j, b.m[1]))
end

"""
    matrix_element((s‚ÇÅ,s‚ÇÇ)::Tuple{<:System,<:System},
                   (a,b)::Tuple{<:SpinOrbital{<:RelativisticOrbital},
                                <:SpinOrbital{<:RelativisticOrbital}},
                   X::TensorScalarProduct,
                   (c,d)::Tuple{<:SpinOrbital{<:RelativisticOrbital},
                                <:SpinOrbital{<:RelativisticOrbital}})

The matrix element of a tensor scalar product, where the factors act
on the orbital pairs `a`,`c` and `b`,`d`, respectively, evaluated in
the basis of coupled spin-orbitals, is computed using
``\\eqref{eqn:scalar-product-tensor-matrix-element-diff-coords-uncoupled}``
together with ``\\eqref{eqn:uncoupling}`` applied to each matrix
element between single orbitals; the individual spin-orbitals couple
``\\ell`` and ``s`` to form a total ``j``, but they are not further
coupled to e.g. a term.
"""
function matrix_element((s‚ÇÅ,s‚ÇÇ)::Tuple{<:System,<:System},
                        (a,b)::Tuple{<:SpinOrbital{<:RelativisticOrbital},
                                     <:SpinOrbital{<:RelativisticOrbital}},
                        X::TensorScalarProduct,
                        (c,d)::Tuple{<:SpinOrbital{<:RelativisticOrbital},
                                     <:SpinOrbital{<:RelativisticOrbital}})
    Œ≥jm‚ÇÅ‚Ä≤ = (first(quantum_numbers(s‚ÇÅ, a)), first(other_quantum_numbers(s‚ÇÅ, a)),
             a.orb.j, a.m[1])
    Œ≥jm‚ÇÇ‚Ä≤ = (first(quantum_numbers(s‚ÇÇ, b)), first(other_quantum_numbers(s‚ÇÇ, b)),
             b.orb.j, b.m[1])
    Œ≥jm‚ÇÅ = (first(quantum_numbers(s‚ÇÅ, c)), first(other_quantum_numbers(s‚ÇÅ, c)),
            c.orb.j, c.m[1])
    Œ≥jm‚ÇÇ = (first(quantum_numbers(s‚ÇÇ, d)), first(other_quantum_numbers(s‚ÇÇ, d)),
            d.orb.j, d.m[1])

    matrix_element2(Œ≥jm‚ÇÅ‚Ä≤, Œ≥jm‚ÇÇ‚Ä≤, X, Œ≥jm‚ÇÅ, Œ≥jm‚ÇÇ)
end

# ** Uncoupled orbitals

"""
    matrix_element(::Union{FullSystem,TotalAngularMomentumSubSystem},
                   a::SpinOrbital{<:Orbital},
                   ùêì·µèq::TensorComponent,
                   b::SpinOrbital{<:Orbital})

The matrix element of a tensor acting on the full system or the total
angular momentum, evaluated in the basis of uncoupled spin-orbitals,
is computed by transforming to the coupled system via
``\\eqref{eqn:coupling}``.
"""
matrix_element(system::Union{FullSystem,TotalAngularMomentumSubSystem},
               a::SpinOrbital{<:Orbital},
               ùêì·µèq::TensorComponent,
               b::SpinOrbital{<:Orbital}) =
    matrix_element(quantum_numbers(system, a)..., ùêì·µèq, quantum_numbers(system, b)...)

@doc raw"""
    matrix_element(system,
                   a::SpinOrbital{<:Orbital},
                   ùêì·µèq::TensorComponent,
                   b::SpinOrbital{<:Orbital})

The matrix element of a tensor acting on `system`, which is a
subsystem, evaluated in the basis uncoupled spin-orbitals, is given by

```math
\begin{equation}
\begin{aligned}
&\matrixel{n_1'j_1'm_1';n_2'j_2'm_2'}{\tensor{T}^{(k)}_q(1)}{n_1j_1m_1;n_2j_2m_2} \\
=&
\delta_{n_2'n_2}\delta_{j_2'j_2}\delta_{m_2'm_2} \\
&\matrixel{n_1'j_1'm_1'}{\tensor{T}^{(k)}_q(1)}{n_1j_1m_1}.
\end{aligned}
\label{eqn:tensor-matrix-element-subsystem-uncoupled}
\tag{V13.1.39}
\end{equation}
```
"""
function matrix_element(system,
                        a::SpinOrbital{<:Orbital},
                        ùêì·µèq::TensorComponent,
                        b::SpinOrbital{<:Orbital})
    Œ≥jm‚ÇÇ‚Ä≤,Œ≥jm‚ÇÇ = other_quantum_numbers(system, a, b)
    @Œ¥ Œ≥jm‚ÇÇ‚Ä≤,Œ≥jm‚ÇÇ
    matrix_element(quantum_numbers(system, a), ùêì·µèq, quantum_numbers(system, b))
end

"""
    matrix_element(::Tuple{S,S},
                   a::SpinOrbital{<:Orbital},
                   X::TensorScalarProduct,
                   b::SpinOrbital{<:Orbital}) where {S<:Union{FullSystem,TotalAngularMomentumSubSystem}}

The matrix element of a tensor scalar product, where both factors act
on the full system or the total angular momentum, evaluated in the
basis of uncoupled spin-orbitals, is computed by transforming to the
coupled system via ``\\eqref{eqn:coupling}``, which then dispatches to
``\\eqref{eqn:scalar-product-tensor-matrix-element}``.
"""
matrix_element(systems::Tuple{S,S},
               a::SpinOrbital{<:Orbital},
               X::TensorScalarProduct,
               b::SpinOrbital{<:Orbital}) where {S<:Union{FullSystem,TotalAngularMomentumSubSystem}} =
                   matrix_element(quantum_numbers(systems[1], a)...,
                                  X, quantum_numbers(systems[1], b)...)

"""
    matrix_element(systems::Tuple{S,S},
                   a::SpinOrbital{<:Orbital},
                   X::TensorScalarProduct,
                   b::SpinOrbital{<:Orbital}) where {S<:SubSystem}

The matrix element of a tensor scalar product, where both factors act
on the same subsystem, evaluated in the basis of uncoupled
spin-orbitals, is just a special case of
``\\eqref{eqn:tensor-matrix-element-subsystem-uncoupled}`` combined
with ``\\eqref{eqn:scalar-product-tensor-matrix-element}``.
"""
function matrix_element((s,_)::Tuple{S,S},
                        a::SpinOrbital{<:Orbital},
                        X::TensorScalarProduct,
                        b::SpinOrbital{<:Orbital}) where {S<:SubSystem}
    @Œ¥ other_quantum_numbers(s, a, b)
    matrix_element(quantum_numbers(s, a),
                   X, quantum_numbers(s, b))
end

"""
    matrix_element((s‚ÇÅ,s‚ÇÇ)::Tuple{<:SubSystem,<:SubSystem},
                   a::SpinOrbital{<:Orbital},
                   X::TensorScalarProduct,
                   b::SpinOrbital{<:Orbital})

The matrix element of a tensor scalar product, where the factors act
on different subsystems, evaluated in the basis of uncoupled
spin-orbitals, is computed using
``\\eqref{eqn:scalar-product-tensor-matrix-element-diff-coords-uncoupled}``.
"""
function matrix_element((s‚ÇÅ,s‚ÇÇ)::Tuple{<:SubSystem,<:SubSystem},
                        a::SpinOrbital{<:Orbital},
                        X::TensorScalarProduct,
                        b::SpinOrbital{<:Orbital})
    Œ≥jm‚ÇÅ‚Ä≤, Œ≥jm‚ÇÅ = quantum_numbers(s‚ÇÅ, a, b)
    Œ≥jm‚ÇÇ‚Ä≤, Œ≥jm‚ÇÇ = quantum_numbers(s‚ÇÇ, a, b)
    matrix_element2(Œ≥jm‚ÇÅ‚Ä≤, Œ≥jm‚ÇÇ‚Ä≤, X, Œ≥jm‚ÇÅ, Œ≥jm‚ÇÇ)
end

"""
    matrix_element((s‚ÇÅ,s‚ÇÇ)::Tuple{<:System,<:System},
                   (a,b)::Tuple{<:SpinOrbital{<:Orbital},
                                <:SpinOrbital{<:Orbital}},
                   X::TensorScalarProduct,
                   (c,d)::Tuple{<:SpinOrbital{<:Orbital},
                                <:SpinOrbital{<:Orbital}})

The matrix element of a tensor scalar product, where the factors act
on the orbital pairs `a`,`c` and `b`,`d`, respectively, evaluated in
the basis of uncoupled spin-orbitals, is computed using
``\\eqref{eqn:scalar-product-tensor-matrix-element-diff-coords-uncoupled}``.
"""
function matrix_element((s‚ÇÅ,s‚ÇÇ)::Tuple{<:System,<:System},
                        (a,b)::Tuple{<:SpinOrbital{<:Orbital},
                                     <:SpinOrbital{<:Orbital}},
                        X::TensorScalarProduct,
                        (c,d)::Tuple{<:SpinOrbital{<:Orbital},
                                     <:SpinOrbital{<:Orbital}})
    @Œ¥ other_quantum_numbers(s‚ÇÅ, a, c) other_quantum_numbers(s‚ÇÇ, b, d)
    Œ≥jm‚ÇÅ‚Ä≤, Œ≥jm‚ÇÅ = quantum_numbers(s‚ÇÅ, a, c)
    Œ≥jm‚ÇÇ‚Ä≤, Œ≥jm‚ÇÇ = quantum_numbers(s‚ÇÇ, b, d)
    matrix_element2(Œ≥jm‚ÇÅ‚Ä≤, Œ≥jm‚ÇÇ‚Ä≤, X, Œ≥jm‚ÇÅ, Œ≥jm‚ÇÇ)
end

export matrix_element, matrix_element2
